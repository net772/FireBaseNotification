package com.example.firebasenotification

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.PendingIntent.FLAG_UPDATE_CURRENT
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import android.widget.RemoteViews
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

/** Îã§ÏùåÍ≥º Í∞ôÏùÄ Í≤ΩÏö∞ ÌÜ†ÌÅ∞Ïù¥ Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÎã§.
 * - ÏÉà Í∏∞Í∏∞ÏóêÏÑú Ïï± Î≥µÏõêÌïòÎäî Í≤ΩÏö∞
 * - ÏÇ¨Ïö©ÏûêÍ∞Ä Ïï± ÏÇ≠Ï†ú/Ïû¨ÏÑ§Ïπò ÌïòÎäî Í≤ΩÏö∞
 * - ÏÇ¨Ïö©ÏûêÍ∞Ä Ïï± Îç∞Ïù¥ÌÑ∞ ÏÜåÍ±∞ÌïòÎäî Í≤ΩÏö∞
 */
class MyFirebaseMessagingService : FirebaseMessagingService() {

    // ÌÜ†ÌÅ∞Ïù¥ Í∞±Ïã† Îê† ÎïåÎßàÎã§ Ïù¥ Í≥≥ÏóêÏÑú ÏûëÏóÖÏ≤òÎ¶¨Î•º Ìï¥Ï£ºÎ©¥ ÎêúÎã§.
    override fun onNewToken(p0: String) {
        super.onNewToken(p0)
    }

    // Î©îÏãúÏßÄ ÏàòÏã†ÏãúÎßàÎã§ Ïã§Ìñâ
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)

        // Ï±ÑÎÑê ÏÉùÏÑ±
        createNotificationChannelIfNeeded()

        val type = remoteMessage.data["type"]?.let { NotificationType.valueOf(it) }
        val title = remoteMessage.data["title"]
        val message = remoteMessage.data["message"]

        type ?: return

        NotificationManagerCompat.from(this)
            .notify(type.id, createNotification(type, title, message))
    }

    private fun createNotificationChannelIfNeeded() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { // Ï±ÑÎÑêÏùò Í≤ΩÏö∞ÏóêÎäî Î≤ÑÏ†Ñ OÎ∂ÄÌÑ∞ ÏÉùÏÑ±
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_DEFAULT // Ï§ëÏöîÎèÑ
            )
            channel.description = CHANNEL_DESCRIPTION

            (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)
                .createNotificationChannel(channel)
        }
    }

    private fun createNotification(type: NotificationType, title: String?, message: String?): Notification {
        val intent = Intent(this, MainActivity::class.java).apply {
            putExtra("notificationType", "${type.title} ÌÉÄÏûÖ")
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        val pendingIntent = PendingIntent.getActivity(this, type.id, intent, FLAG_UPDATE_CURRENT)
        // Ïã§Ï†ú ÏïåÎ¶º Ïª®ÌÖêÏ∏† ÎßåÎì§Í∏∞
        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_baseline_circle_notifications_24) // ÏïÑÏù¥ÏΩò Î≥¥Ïó¨Ï£ºÍ∏∞
            .setContentTitle(title) // ÌÉÄÏù¥ÌãÄ
            .setContentText(message) // Î©îÏãúÏßÄ ÎÇ¥Ïö©
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)  // Ïò§Î†àÏò§ Ïù¥Ìïò Î≤ÑÏ†ÑÏóêÏÑúÎäî ÏßÄÏ†ï ÌïÑÏöî
            .setContentIntent(pendingIntent)
            .setAutoCancel(true) // ÏïåÎ¶º ÌÅ¥Î¶≠ Ïãú ÏûêÎèô Ï†úÍ±∞

        when (type) {
            NotificationType.NORMAL -> Unit
            NotificationType.EXPANDABLE -> {
                notificationBuilder.setStyle(
                    NotificationCompat.BigTextStyle() // ÌôïÏû• Í∞ÄÎä•Ìïú ÏïåÎ¶º
                        .bigText(
                            "üòÄ üòÉ üòÑ üòÅ" +
                                "ü§¢ ü§Æ ü§ß üò∑  ü§ï"
                        )
                )
            }
            //Ïª§Ïä§ÌÖÄ ÏïåÎ¶º
            NotificationType.CUSTOM -> {
                notificationBuilder
                    .setStyle(NotificationCompat.DecoratedCustomViewStyle())
                    .setCustomContentView(
                        RemoteViews(
                            packageName,
                            R.layout.view_custom_notification
                        ).apply {
                            setTextViewText(R.id.title, title)
                            setTextViewText(R.id.message, message)
                        }
                    )
            }
        }
        return notificationBuilder.build()
    }

    companion object {
        private const val CHANNEL_NAME = "Emoji Party"
        private const val CHANNEL_DESCRIPTION = "Emoji PartyÎ•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel Id"
    }
}
